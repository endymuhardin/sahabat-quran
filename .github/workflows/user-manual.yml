name: Generate and Publish User Manual

on:
  # Trigger on pushes to main branch
  push:
    branches: [ main ]
    paths:
      - 'src/test/java/**/documentation/**'
      - 'src/main/resources/templates/**'
      - 'generate-user-manual.sh'
      - '.github/workflows/user-manual.yml'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      generate_type:
        description: 'Type of documentation to generate'
        required: false
        default: 'complete'
        type: choice
        options:
          - complete
          - academic
          - student-only
          - staff-only
          - teacher-only

# Allow workflow to write to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  generate-documentation:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: ysqdb_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    
    - name: Install Playwright browsers
      run: |
        # Install Playwright dependencies
        npx playwright install-deps
        npx playwright install chromium
    
    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
    
    - name: Setup test database
      run: |
        # Database will be created automatically by Spring Boot with Flyway migrations
        echo "Database will be initialized by the application"
    
    - name: Compile test classes
      run: |
        ./mvnw clean test-compile -DskipTests=true
    
    - name: Generate complete user manual
      if: ${{ github.event.inputs.generate_type == 'complete' || github.event.inputs.generate_type == '' }}
      run: |
        chmod +x ./generate-user-manual.sh
        ./generate-user-manual.sh generate
      env:
        SPRING_PROFILES_ACTIVE: test
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/ysqdb_test
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: postgres
        PLAYWRIGHT_HEADLESS: true
        PLAYWRIGHT_RECORDING: true
        PLAYWRIGHT_SLOWMO: 1500
    
    - name: Generate academic documentation only
      if: ${{ github.event.inputs.generate_type == 'academic' }}
      run: |
        chmod +x ./generate-user-manual.sh
        ./generate-user-manual.sh academic
      env:
        SPRING_PROFILES_ACTIVE: test
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/ysqdb_test
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: postgres
        PLAYWRIGHT_HEADLESS: true
        PLAYWRIGHT_RECORDING: true
        PLAYWRIGHT_SLOWMO: 1500
    
    - name: Generate specific workflow documentation
      if: ${{ contains(fromJSON('["student-only", "staff-only", "teacher-only"]'), github.event.inputs.generate_type) }}
      run: |
        # Generate specific workflow based on input
        case "${{ github.event.inputs.generate_type }}" in
          "student-only")
            ./mvnw test -Dtest="StudentRegistrationUserGuideTest" -Dplaywright.headless=true -Dplaywright.recording=true -Dmaven.test.failure.ignore=true
            ;;
          "staff-only")
            ./mvnw test -Dtest="StaffRegistrationUserGuideTest" -Dplaywright.headless=true -Dplaywright.recording=true -Dmaven.test.failure.ignore=true
            ;;
          "teacher-only")
            ./mvnw test -Dtest="TeacherRegistrationUserGuideTest" -Dplaywright.headless=true -Dplaywright.recording=true -Dmaven.test.failure.ignore=true
            ;;
        esac
        
        # Generate markdown from captured data
        ./mvnw test-compile exec:java -Dexec.mainClass="com.sahabatquran.webapp.functional.documentation.MarkdownDocumentationGenerator" -Dexec.args="target/documentation target/documentation/PANDUAN_PENGGUNA_LENGKAP.md" -Dexec.classpathScope="test"
      env:
        SPRING_PROFILES_ACTIVE: test
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/ysqdb_test
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: postgres
        PLAYWRIGHT_HEADLESS: true
        PLAYWRIGHT_RECORDING: true
        PLAYWRIGHT_SLOWMO: 1500
    
    - name: Verify documentation generation
      run: |
        echo "=== Generated Documentation Files ==="
        find target/documentation -type f -name "*.md" -exec ls -la {} \;
        
        echo "=== Documentation Content Preview ==="
        if [ -f "target/documentation/PANDUAN_PENGGUNA_LENGKAP.md" ]; then
          echo "üìÑ Main documentation file found"
          head -50 target/documentation/PANDUAN_PENGGUNA_LENGKAP.md
        else
          echo "‚ùå Main documentation file not found"
          ls -la target/documentation/ || echo "Documentation directory not found"
        fi
        
        echo "=== Screenshots and Videos ==="
        find target/documentation -name "*.png" -o -name "*.webm" | head -10
    
    - name: Create GitHub Pages structure
      run: |
        # Create pages directory
        mkdir -p pages
        
        # Copy documentation to pages
        if [ -d "target/documentation" ]; then
          cp -r target/documentation/* pages/
        fi
        
        # Create index.html that redirects to the main documentation
        cat > pages/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="id">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Panduan Pengguna - Yayasan Sahabat Quran</title>
            <meta http-equiv="refresh" content="0; url=PANDUAN_PENGGUNA_LENGKAP.html">
            <style>
                body { 
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    display: flex; 
                    justify-content: center; 
                    align-items: center; 
                    height: 100vh; 
                    margin: 0;
                    background: linear-gradient(135deg, #059669 0%, #047857 100%);
                    color: white;
                }
                .container {
                    text-align: center;
                    padding: 2rem;
                    background: rgba(255,255,255,0.1);
                    border-radius: 1rem;
                    backdrop-filter: blur(10px);
                }
                .logo {
                    font-size: 3rem;
                    margin-bottom: 1rem;
                }
                a {
                    color: #86efac;
                    text-decoration: none;
                    font-weight: bold;
                }
                a:hover {
                    color: #bbf7d0;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="logo">üìñ</div>
                <h1>Panduan Pengguna</h1>
                <h2>Yayasan Sahabat Quran</h2>
                <p>Mengarahkan ke dokumentasi lengkap...</p>
                <p><a href="PANDUAN_PENGGUNA_LENGKAP.html">Klik di sini jika tidak diarahkan otomatis</a></p>
            </div>
        </body>
        </html>
        EOF
        
        # Convert markdown to HTML if pandoc is available, otherwise create a simple redirect
        if command -v pandoc >/dev/null 2>&1; then
          if [ -f "pages/PANDUAN_PENGGUNA_LENGKAP.md" ]; then
            pandoc -f markdown -t html5 \
              --standalone \
              --metadata title="Panduan Pengguna - Yayasan Sahabat Quran" \
              --css "https://cdn.jsdelivr.net/npm/github-markdown-css@5/github-markdown-light.css" \
              --css "data:text/css,body{box-sizing:border-box;min-width:200px;max-width:980px;margin:0 auto;padding:45px}.markdown-body{font-size:16px;line-height:1.6}.markdown-body img{max-width:100%;height:auto}" \
              "pages/PANDUAN_PENGGUNA_LENGKAP.md" \
              -o "pages/PANDUAN_PENGGUNA_LENGKAP.html"
          fi
        else
          echo "Pandoc not available - will serve markdown directly"
        fi
        
        echo "=== Pages Directory Structure ==="
        find pages -type f | head -20
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./pages
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # Optional: Send notification on completion
  notify:
    runs-on: ubuntu-latest
    needs: generate-documentation
    if: always()
    steps:
    - name: Notify completion
      run: |
        if [ "${{ needs.generate-documentation.result }}" == "success" ]; then
          echo "‚úÖ User manual generation and publishing completed successfully"
          echo "üìñ Documentation is now available at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
        else
          echo "‚ùå User manual generation failed"
        fi